pipeline {
    agent {
        kubernetes {
            label 'astro-blog-dep'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: astro-blog-dep
spec:

  containers:
    - name: registry
      image: registry:2
      securityContext:
        runAsUser: 0
      ports:
      - containerPort: 5000
      command:
        - /bin/sh
      args:
        - -c
        - "while true; do sleep 100; done"
      env:
        - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
          value: /var/lib/registry
        - name: REGISTRY_HTTP_ADDR
          value: 0.0.0.0:5000
      volumeMounts:
        - name: temp-storage
          mountPath: /var/lib/registry

    - name: docker
      image: docker:20.10-dind
      tty: true
      stdin: true
      securityContext:
        privileged: true
        runAsUser: 0
      env:
        - name: DOCKER_TLS_CERTDIR
          value: ""
      command:
        - /bin/sh
      args:
        - -c
        - "dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --insecure-registry=docker-registry.docker-registry.svc.cluster.local:5000 & while true; do sleep 100; done"
      volumeMounts:
        - name: github-repo-volume
          mountPath: /workspace/github-repo

    - name: kubectl
      image: docker.io/bitnami/kubectl:latest
      tty: true
      stdin: true
      securityContext:
        runAsUser: 0
      command:
        - /bin/sh
      args:
        - -c
        - "while true; do sleep 100; done"
      volumeMounts:
        - name: github-repo-volume
          mountPath: /workspace/github-repo

    - name: network-test
      image: docker.io/nicolaka/netshoot:latest
      tty: true
      stdin: true
      securityContext:
        runAsUser: 0
      command:
        - /bin/sh
      args:
        - -c
        - "while true; do sleep 100; done"

  volumes:
    - name: github-repo-volume
      emptyDir: {}
    - name: temp-storage
      emptyDir: {}

  imagePullSecrets:
    - name: docker-credentials
"""
        }
    }

    environment {
        GITHUB_REPO  = "https://github.com/Unbounder1/blog-website.git"
        CLONE_DIR    = "/workspace/github-repo"
        REGISTRY_URL = "docker-registry.docker-registry.svc.cluster.local:5000"
    }

    stages {
        stage('Install Git (if needed)') {
            steps {
                container('kubectl') {
                    script {
                        sh """
                          echo 'Checking if git is installed...'
                          if ! command -v git &> /dev/null
                          then
                            echo 'Installing git...'
                            # If image is Debian/Ubuntu-based:
                            apt-get update && apt-get install -y git
                            # If Alpine-based, use:
                            # apk update && apk add git
                          else
                            echo 'Git is already installed.'
                          fi
                        """
                    }
                }
            }
        }

        stage('Clone GitHub Repository') {
            steps {
                container('kubectl') {
                    script {
                        sh """
                            echo "Cloning GitHub repository..."
                            mkdir -p "${CLONE_DIR}"
                            git clone ${GITHUB_REPO} ${CLONE_DIR}
                            chmod +x ${CLONE_DIR}/script/resources/docker-build.sh
                            ls -l ${CLONE_DIR}/script/resources/docker-build.sh
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        // install bash if missing
                        sh """
                            echo "Installing bash if missing..."
                            if command -v apk >/dev/null 2>&1; then
                                apk update && apk add bash
                            else
                                apt-get update && apt-get install -y bash
                            fi
                        """

                        // wait for docker to be ready
                        sh """
                            echo "Waiting for Docker to be ready..."
                            until docker info >/dev/null 2>&1; do
                            echo "Docker daemon not yet accessible..."
                            sleep 1
                            done
                            echo "Docker is up!"
                        """

                        // build docker images
                        sh """
                            echo "Building Docker images..."
                            ls -l ${CLONE_DIR}/script/resources/docker-build.sh
                            bash ${CLONE_DIR}/script/resources/docker-build.sh ${REGISTRY_URL} all
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        // Ensure you actually have a Jenkins credential with ID 'k8s-token'
                        // that includes a valid kubeconfig or a token with cluster permissions.
                        try {
                            withKubeConfig([credentialsId: 'k8s-token', serverUrl: 'https://kubernetes.default.svc']) {
                                sh """
                                    echo "Current Kubernetes Context:"
                                    kubectl config current-context

                                    echo "Getting all resources in blog-dev namespace:"
                                    kubectl get all -n blog-dev || true

                                    echo "Applying Kubernetes manifests..."
                                    kubectl apply -f ${CLONE_DIR}script/resources/dev-deployment -n blog-dev
                                """
                            }
                        } catch (Exception e) {
                            echo "Error during deployment: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }

        stage('Testing Connectivity') {
            steps {
                container('network-test') {
                    script {
                        try {
                            withKubeConfig([credentialsId: 'k8s-token', serverUrl: 'https://kubernetes.default.svc']) {
                                sh """
                                    echo "Testing connectivity to frontend service..."
                                    curl -v http://frontend-dev-svc.blog-dev.svc.cluster.local:4321
                                """
                            }
                        } catch (Exception e) {
                            echo "Connectivity test failed: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
    }
}